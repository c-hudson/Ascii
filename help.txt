& help
   ===[ Basic Commands ]================================================

      go <direction>                look               look <thing>
      pose <text>                   QUIT               say <text>
      whisper <player>=<text>       WHO                
   
   Quick Help for beginners          |  General MUSH Topics
      help basics                    |     help topics
                                     |
   To get a list of commands         |  To get a list of functions()
      help commands                  |     help functions
                                     |
   Help on a command or function     |  Help on public com system
      help <command>                 |     com help

   =====================================================================
& basics
You've connected to a MUSH, so now what do you do? Well, MUSHes
are broken up into many different rooms. There's many different ways
to interact in a room or people within a room. Lets start with a few
important commands to interact with the things around you.

look
   This command will tell you about the room your currently in.
   It should list a description of the room, contents of the room,
   and a list of exits on how to get out of the room.

go <direction>
   Traveling through an exit to another room.

say <message>
   Say something to the people in your current room.

"<message>
   A shortened version of the say command. This alias will save you
   a few clicks on the keyboard.

pose <message>
   Perform an action like smiling by typing in: pose smiles

:<message>
   a shortened version of the pose command.

whisper <person> = <message>
   Want to say something to a particular person? Whisper it to them
   and no one else will hear it. This only works with people in the
   same room.

WHO
   Not everyone on-line will be in the same room as you, the WHO
   command lists everyone connected to the MUSH.

page <person> = <message>
   Send a message to a person in any room 
& topics
    basics
& "
command:

   "<message>

Says <message> to everyone in your current location.

Example:              |   Output
===========================================================
                      |
"Hello.               |   You say, "Hello"

Also see: say
& &
command:

   &<attribute> <object> = <text>

This command is used to store information on an object. The text
may be either generic information or Mushcode. <text> can be
later retrieved with the get function or maybe examined.

Example:              |   Output
===========================================================
                      |
&foo me = bar         |   Set.
                      |
examine me/foo        |   FOO: bar

Also see: examine, get(), @set, &&

& &&
command: 

   &&<attribute> <object> = <text>

This is the multiline version of the @set and & command. Any
commands issued after this command will be added to the end
of attribute's value. Issuing a single blank line will end 
the command. A period on a blank line can be used in place 
of a blank line.
   
Example:              |   Output
===========================================================
                      |
&&foo me = bar        |
bar                   |
.                     |
boo                   |
                      |   Set.
examine me/foo        |   FOO: bar
                      |   biz
                      |
                      |   boo

Also see: examine, get(), @set, &
& :
command: 

   :<message>
 
Performes an action to everyone in your current room. If
there is a space between the ":" and the message, there
will be no space in between your name and your message.
This is also a shortcut for the pose command.


Example:              |   Output
===========================================================
                      |
:smiles               |   Guest smiles
: 's eyes light up.   |   Guest's eyes light up.

Also see: pose
& ;
command:

   ;<message>
 
This command is like the ":" command except that there
is no space inserted between your name and the action.


Example:              |   Output
===========================================================
                      |
;'s eyes light up.    |   Guest's eyes light up.
; 's eyes light up.   |   Guest 's eyes light up.

Also see: pose, :
& @@
command: 

   @@ <text>
 
This command is useful for putting comments into a Mushcode.
The command actually does nothing but makes your code more
readable.

Example:              |   Output
===========================================================
                      |
&&foo me=$dg  *:      |
   @@ Dog Controller  |
   @force #0=%0       |
                      | Set.
dg smiles.            | Dog smiles.
& @boot
command: 

   @boot <player>
   @boot/port <port#>

Disconnects a player from the game. If the player is connected
multiple times, then all connections are disconnected. Optionally,
a port may be specified to be more presice about which connection
is disconnected. Port numbers are listed on the WHO for wizards.

Example:              |   Output
===========================================================
                      |
@boot adrick          | Adrick has been @booted.
                      | Adrick has disconnected.
                      |
@boot/port 1          | Adrick has been @booted.
                      | Adrick has disconnected.

Also see: WHO
& @close
I don't think this command does anything, scheduled for removal or fixing.
& @cls
command: 

   @cls

This command sends a -- line and clear screen command to the console. 
This is useful for debuging output as it happens. Results are not
visible from inside the MUSH.
& @code
command: 

   @code

Lists stats on how big the version of TeenyMUSH is that is
currently running broken down by file. Size is listed in bytes
and lines.
& @commit
command: 

   @commit

Forces a commit to the mysql database. TeenyMUSH typically commits
as needed but occasionally there is a need to force a commit.
This command is wizard only.
& @crash
command: 

   @crash

This forces TeenyMUSH to perform an operation which will crash the
MUSH. A stack trace will be produced on the console and the player
invoking the command. The MUSH will recover from the crash and 
continue on, hopefully. Safe for anyone to use.
& @create
command: 

   @create <name>

Creates a object with the specified name. Objects can be molded
with descriptions, attributes, and flags to be whatever you want. 
Each object gets its own id number. Keep track of this number
as it can help with coding it to do things or find it after it
has been lost.

Example:              |   Output
===========================================================
@create puppet        | Object created as: Puppet(#119o)

See Also: @destroy, @set, @describe
& commands
run: @list commands
& functions
run: @list functions
& @describe
command: 

   @describe <name> = <description>

Sets the description for an object. People will see this description
if they look at the object. An empty description will remove the
description from the object.


Example:               |   Output
============================================================
@describe puppet=Shiny | Set.

look puppet            | Shiny


See Also: @set
& @destroy
command: 

   @destroy <object>

Instantly deletes the object from the MUSH. Opposite of @create.
& @dig
command:

   @dig <name> 
   @dig <name> = <exitlist1> , <exitlist2>

Creates a new room with the specified name. Optionally providing
an exit list can create exits going in and out of the newly created
room in one command. Exit list 1 provides exits going to the room
while exit list 2 provides an exit coming back to your current
location. Multiple exit names can be provided by use of a semi-
colon between exit names.

Example:                |  Output
===============================================================
@dig Hotel              |  Creates a room named Hotel
@dig Hotel=In,Out       |  Creates a room with in and out exits
@dig Hotel=Inn;in,Out;o |  Creates the room with in and out
                           exits with aliases of in and o.

See also: @open, @link
& @doing
command:

   @doing <message>

Sets your @doing message which is visible on the DOING/WHO command.
Use this to tell people what your up to.

See also: DOING, WHO
& @dolist
command:

   @dolist <list> = <action>

Takes a list and runs the code once for every item in the list.
As the code is run, the special symbol ## is replaced with the
current item from the list.

Example:                |  Output
===============================================================
@dolist a b c = say ##  |  You say, "a"
                        |  You say, "b"
                        |  You say, "c"
& @find
command:

   @find
   @find <name>

Lists all the objects that you own or just those who's name contains
<name>.
& @password
command:

   @password <old_password> = <new_password>

   This command change your password. Passwords must contain 8 characters
   or more, contain at least one upper case character, and contain at least
   one numeric character.
& @mail
command:

   @mail                                  : Shows an shortened list of email
   @mail short                            : Shows a count of emails
   @mail <number>                         : Reads one email message
   @mail <person> = <message>             : Sends an email message
   @mail/delete <number>                  : Deletes an email message

   This command is used for displaying or sending email to/from other people.

   ex:
      @mail adrick = testing
      @mail 1
      @mail/delete 1
& @name
command:

   @name <object> = <new_name>

   This changes the name of an <object> to <new_name>. Names may contain
   ansi color codes and use of a seperate @moniker is not required.
& @switch
command:

   @switch[/switch} <string>=<test>,<cmd>,<test>,<cmd>,...,<default_cmd>

   If <string> matches <test>, the command following the <test> is run.
   Only the first match is concerned. If no matches are made, then the
   <default_cmd> is run if it exists.

   <test> may include * wild cards. Text matched by the wildcard maybe
   retrieved using %m0 - %m9. The <test> may also include > and < for
   greater and less then comparisons.

   For readability, the <default_cm> may have an optional preceeding
   <test> of DEFAULT.

   Availible switches:

      /regexp        :   Use regular expression matching instead of
                         simple wildcard matching. All "\" characters
                         will need to be escaped out due to the nature
                         of how MUSH deals with the "\" character.

Example:                                               |  Output
===========================================================================
@switch abc=*b*,say %m0,*e*,say def,DEFAULT,say !match |  You say, "a"
@switch def=*b*,say %m0,*e*,say def,DEFAULT,say !match |  You say, "def"
@switch ghi=*b*,say %m0,*d*,say def,DEFAULT,say !match |  You say, "!match"
@switch ghi=*b*,say %m0,*d*,say def,say !match         |  You say, "!match"
@switch abcde=^ab(.*)e$,say %m0                        |  You say, "cd"

& input()
function:

    input()     : Returns a line of input from a connected socket opened from
                  the @telnet command. If a line of data is not unavailible
                  yet, the function will return "#-1 No data found". If the
                  connection has closed, the function will return 
                  "#-1 Connection Closed".

    input(last) : Returns the last connection's data for the whole MUSH. If
                  the connection is still pending, only partial data will be
                  returned. This is implimented for debug purposes only.

See: @telnet, telnet_open()
& @telnet
command:

   @telnet <hostname> <port>

   Opens a connection to <hostname> on <port> if the object is set either
   SOCKET_PUPPET or SOCKET_INPUT. Both flags are setable by WIZARDS only.

   If the object is set SOCKET_PUPPET, all socket input is matched via a
   ^pattern style listen used by MUSH to match input in the same room as
   an object. However, instead of a "^" the pattern must start with "!"
   to specify a socket based listen.

   If the object is set SOCKET_LISTEN, then all socket input may be
   retrieved by the input() / telnet_open functions.

See: input(), telnet_open(), SOCKET_PUPPET, SOCKET_INPUT, @close
&url
function:

   url(http://address/path)
   url(https://address/path)

      This function is a way to pull web pages via MushCode. It must be used
      within a loop command like @while. The function will return 1 as long
      as the connection is still open or there is data to return. The responce
      from the website may be retrieved from the %{data} variable.

   Error Responces contained in %{data}:

       #-1 CONNECTION FAILED    :   url() was unable to connect to the remote
                                    site.

       #-1 PAGE LOAD FAILURE    :   url connected but the server responded
                                    with a 400 or higher return code.
       #-1 DATA PENDING         :   No data was availible at this time

   Example:

      @while (url(https://www.wowbagger.com/process.php)) {
         @switch %{data}=
            #-1 CONNECTION FAILED,
               say I'm out of insults \[connection failed\],
            #-1 PAGE LOAD FAILURE,
               say =I'm out of insults \[page load failure\],
            #-1 DATA PENDING,
               @@ ignore,
            *customBig>*<*,
               say %m1
      }

& @perl
command:

   @perl <command>

   This invokes <command> via perl's eval() function. <Command> must be
   a valid perl command. Only GOD may run this command.
& entities()
function:

    entities(encode,<txt>)  :  Encodes <txt> with HTML entities.
    entities(decode,<txt>)  :  Decodes <txt> with HTML entities.

Example:
    say entities(encode,<'>)       :  You say, "abc&lt;&#39;&gt;def"
    say entities(encode,&lt;&gt;)  :  You say, "<>"
& match()
function:
    match(<string>,<pattern>)
    match(<string>,<pattern>,<delimiter>)

    Compares each word or segment of the string against the provided pattern
    to see if it matches. If a match occures, the function returns the word
    or segment position that was matched. If no match occures, the function
    will return 0. 

    Patterns may use * to match multiple characters or ? to match a single
    character.

Example:
     say match(abc def,def)               :  You say, "2"
     say match(abc def,*e?)               :  You say, "2"
     say match(funky|abc def|foo,*e*,|)   :  You say, "2"
& @trigger
command:

   @trig <obj>/<attr> 
   @trig <obj>/<attr> = <parm1>,<parm2>, .. <parm9>?

   Runs the commands in the attribute on object. The Parameters are passed
   in via %0 .. %9. You must control the object or the attribute must be
   a $command.
& setunion()
function:
    setunion(<string1>,<string2>,[<delim>,<seperator>,<sort type>])

    Returns <string1> and <string2> after removing duplicate words. The
    results are sorted alphanumerically or by <sort type>. Optionally, a
    delimter and output seperator may be used.

    <Sort type> may be:
        N :  Numberic
        F :  Floating point
        D :  Debref
        A :  Alphanumeric

Example:
     say setunion(a b c d e, d c f)        :  You say, "a b c d e f"
     say setunion(a|b|c|d|e,d|c|f,|,\,)    :  You say, "a,b,c,d,e,f"
     say setunion(#453 #3,#5 #3 #463,,,d)  :  You say, "#3 #5 #453 #463"
& setdiff()
function:
    setdiff(<string1>,<string2>,[<delim>,<seperator>,<sort type>])

    Returns those words in <string1> that are not in <string2>. The
    results are sorted alphanumerically or by <sort type>. Optionally, a
    delimter and output seperator may be used.

    <Sort type> may be:
        N :  Numberic
        F :  Floating point
        D :  Debref
        A :  Alphanumeric

Example:
     say setunion(a b c d e, d c f)        :  You say, "a b c d e f"
     say setunion(a|b|c|d|e,d|c|f,|,\,)    :  You say, "a,b,c,d,e,f"
     say setunion(#453 #3,#5 #3 #463,,,d)  :  You say, "#3 #5 #453 #463"
& lit()
function:
    lit(<string1>,<string2>..., <stringN>)

    Returns the strings as is without any modification. Good for 
    showing code to others?

Example:
     > say lit(say [run(say [run(say [run(say test %b %s %p)])])])

     You say, "say [run(say [run(say [run(say test %b %s %p)])])]"

& @set
command:

   @set object = [!] flag
   @set object/attribute = [!] attribute_flag


   Sets a flag on either an object or attribute.

See: @list flags
& v()
function:
    v(attribute)

    Returns the attribute on the calling object.

Example:
     &foo me = bar
     > say v(foo)

     You say, "bar"
& @sleep
command:

   @sleep <seconds>

   Causes the current running MUSH code to pause <seconds> before continuing
   on. 

Example:
   &foo me = say [time()];@sleep 5;say [time()]
   @trig me/foo

   You say, "Thu Jan 31 12:39:04 2019"
   You say, "Thu Jan 31 12:39:10 2019"

See: @wait
& @wait
command:

   @wait <seconds> = <command>

   Runs <command> after waiting <seconds>. Any commands after the @wait
   command will not wait to be run. 

Example:
   &&foo me = $foo:
      say BEFORE: [time()];
      @wait 5=say MIDDLE: [time()];
      say AFTER: [time()]

   @trig me/foo
   You say, "BEFORE: Thu Jan 31 12:39:04 2019"
   You say, "AFTER: Thu Jan 31 12:39:04 2019"
   You say, "MIDDLE: Thu Jan 31 12:39:10 2019"

See: @sleep
& stats()
function:
    stats(<player>)

    Returns the number of objects in the database broken down by total
    objects, rooms, exits, things, players, and garbage owned by 
    <player>. All stats are returned if <player> is replaced with "all"
    or no arguments are passed in.

Example:
     > say stats(me)
     You say, "30 4 7 18 1 0"
     > say stats(all)
     You say, "304 63 153 36 52 1008"
& mod()
function:
     mod(<number1>,<number1>)

     returns the modulus of two numbers. This is the remainder from dividing
     <number1> by <number2>.
& escape()
function:

     escape(<text>)

     Puts a "\" character before any special characters like: %{}[];, 

Example:
     > say escape({}[]();,)
     You say, "\{\}\[\]\(\)\;"
& trim()
function:

     trim(<text>)

     Removes any leading or trailing spaces.

Example:
     > say trim(        this is a test       )
     You say, "this is a test"
& @wipe
command :
     @wipe <object>
     @wipe <object>/<pattern>

     Erases an object or just those attributes that match <pattern>
& fullname()
function:

     fullname(<object>)

     Returns the entire name of exits. Name() only returns the first name.

Example:
     @open out;leave;exit;o = #42
     > say fullname(out)
     You say, "out;leave;exit;o"
     > say name(out)
     You say, "out"
& strmatch()
function:

     strmatch(<text>,<pattern>)

     Returns 1 or 0 depending upon if <pattern> matches the whole string
     in <text> or not. Similar to match()

Example:
     > say strmatch(the quick brown fox,*fox*)
     You say, "1"
     > say strmatch(the quick brown fox,fox*)
     You say, "0"
& filter()
function:

     filter(<attribute>,<list>)

     Takes a list of words and passes each word in <list> to the
     <attribute> as %0. If it evaluates to 1 then the word is returned,
     if it evaluates to 0, the word is excluded.

Example:
     > &tolong object = [gt(length(%0),10)]
     > say filter(tolong,thisisatest of the world)
     You say, "of the world"
& null()
function:

     null(<text>)

     Evaluates <text> but doesn't return the results. Nothing is
     returned. This can be used for supressing the output of functions.

Example:
     > say null(repeat(x,75))
     You say, ""
& args()
function:

     args(<delim>)

     This function returns all the arguements %0 .. %999 that were 
     passed in. This could be used inside of u() to iterate through
     a variable number of arguments.

Example:

     > &foo me = [args(|)]
     > say u(foo,1,2,3,4,5,6,7,8,9,10,11,12)

     You say, "1|2|3|4|5|6|7|8|9|10|11|12"
& shift()
function:

     shift()

     This function will return and remove %0 and move all arguments 
     %1 .. %999 down one position so that %1 is now %0, %2 is now %1,
     etc.

Example:
     > &foo me = Shifted Value = [shift()], \%0 = %0, \%1 = %1
     > say u(foo,1,2,3)

     You say, "Shifted Value = 0, %1 = 1, %2 = 2"
& unshift()
function:

     unshift(<value>)

     This function will add will <value> to %0 causing every other
     position to be moved down one. %0 will become %1, %1 will become
     %2, etc.

Example:

     > &foo me = [unshift(foo)]\%0 = %0, \%1 = %1, \%2 = %2
     > say u(foo,1,2)

     You say, "%0 = foo, %1 = 0, %2 = 1"
& pop()
function:

     pop()

     This function will return the last %0 - %999 value and remove
     it from the list.

Example:

     > &foo me = Popped Value=[pop()], \%0 = %0, \%1 = %1, \%2 = %2
     > say u(foo,1,2,3,4)

     You say, "Popped Value=4,%0 = 1, %1 = 2, %2 = 3"
& push()
function:

     push(<value>)

     This function will add <value> after the last %0 - %99 value.

Example:

     > &foo me = [push(foo)]\%0 = %0, \%1 = %1, \%2 = %2
     > say u(foo,1,2)

     You say, "%0 = 1, %1 = 2, %2 = foo"
& asc()
function:

     asc(<delim>)

     Returns the ASCII numberical value of the first character of
     <delim>

Example:

     > say asc(F)

     You say, "70"
& ord()
function:

     ord(<number>)

     Returns the character associated with the decimal <number> according
     to the standard ASCII table. Google ASCII Table.


Example:

     > say ord(35)

     You say, "#"

Also see: chr()
& asc()
function:

     asc(<number>)

     Returns the character associated with the decimal <number> according
     to the standard ASCII table. Google ASCII Table. This is an alias for
     the ord() function.


Example:

     > say asc(35)

     You say, "#"

Also see: ord(), chr()

    
& @perl
command:

   @perl <code>

   Runs the <code> inside of perl. Not recommended but useful for fixing
   something that can't be normally fixed.

Example:

   @perl printf("%s\n",print_var($prog));

& say
command:

   say <text>
   say/noeval <text>

   Causes your character to say something which can be heard by everyone
   in the current room. A shortened version of this command is to use
   a double quote.

   Using the /noeval switch causes the command not to evaluate <text>
   so that it is said as is.

Example:

   > say Hello.
   You say, "Hello."

   > "Hello
   You say, "Hello."

   > say/noeval %0 %1 %2
   You say, "%0 %1 %2"
& @reload
command:

   @reload

   If any changes to the perl script have been made, then this command will
   load those changes into the currently running TeenyMUSH server. You must
   be set GOD to use this command.

& pose
command:

   pose <text>

   This command is used to express an action. Your name is prefixed before
   <text> and is announced to everyone in the current room. A shortcut for
   this command is ":".

Example:

   > pose smiles.

   Guest smiles.

   > :smiles.

   Guest smiles.

Also see: emote
& emote
command:

   pose <text>

   This command is similar to the pose command but without a space between
   your name and <text>. Your name is prefixed before <text> without a space
   and is announced to everyone in the current room. A shortcut for this
   command is ";".

Example:

   > emote 's eyes light up.

   Guest's eyes light up.

   > ;'s eyes light up.

   Guest's eyes light up.

Also see: pose
& who
command:

   WHO
   WHO <name>

   This command lists all people who are connected to the TeenyMUSH server
   at this time. This command also lists time connected, amount of time
   idle, and their @doing. If a name, or partial name, is provided, then
   only those players who match <name> will be listed.
& lcon()
function:

    lcon(<object>)

    Returns a list of object dbrefs that are in <object>. You may do an
    lcon() on those objects you own, or you are in. Dark objects are always
    excluded.
& pid()
function:

    pid()

    Returns the pid of the currently running program.

Example:
 
    > say pid()

    You say, "31776"
& lpid()
function:

    lpid()

    Returns all pids of any currently running program that you control.

Example:
 
    > say lpid()

    You say, "31776 31781"

& whisper
command:

   whisper <object> = <message>
   whisper <message>

   Want to say something to a particular person? Whisper it to them
   and no one else will hear it. This only works with people in the
   same room.

   If no object is specified, the whisper will go to the last person
   that you whispered to if they are still around.

ex:
   > whisper guest = Hello
   You whisper, "Hello" to Guest.

   > whisper Hello
   You whisper, "Hello" to Guest.
& @quota

   @quota
   @quota <player>
   @quota <player> = <amount>


   Sets the amount of quota that a player may use if a <amount> is
   specified. Otherwise the command will just list the quota for
   yourself or a specified player.

ex:
   > @quota
   Adrick Quota:        50  Used:         0

   > @quota Kligore
   Kligore Quota:        50  Used:         0

   > @quota Kligore = 10
   Kligore Quota:        10  Used:         0
& `
command:

   '<person> <message>

   Sends a message to everyone in the current room directed towards a
   particular person.

ex:
   > 'kilgore Hello
   Adrick [to Kilgore]: Hello
& to
run: help `
& html_strip()
function:

    html_strip(<text>)


    Returns what <text> would be rendered like in a purely text
    format removing all html tags.

Example:
 
    > say html_strip(<a href=foo>bar</a>)

    You say, "bar"

& substitutions
SUBSTITUTIONS
  Topic: SUBSTITUTIONS
 
  All messages may contain %-substitutions, which evaluate to gender-specific
  pronouns if the player's gender is set or to other useful information.
  Information returned is based on the player that caused the message to be
  displayed, not the object that stored the message or which is running the
  action list.  The substitutions available are:
 
    %p, %P    = Name's, his, her, its, their.   (possessive)
    %n, %N    = the player's name.
    %k, %K    = the player's colorized/accented name.
    %r        = carriage return.
    %t        = tab character.
    %b        = space character.
    %%        = literal '%' character.
    %0-%9     = Value of positional parameter/stack location 0 through 9.
    %m0 - %m9 = Matches wild card 0 - 9 from a conditional statment in
                @switch.
    %va-%vz   = Contents of attribute va through vz.
  
& ansi
function:

  ansi(<codes>,<string>)

  This allows you to change the color of the a string of text.

ansi codes:

  f - flash                       i - inverse
  h - hilite                      n - normal
  u - underline

  x - black foreground            X - black background
  r - red foreground              R - red background
  g - green foreground            G - green background
  y - yellow foreground           Y - yellow background
  b - blue foreground             B - blue background
  m - magenta foreground          M - magenta background
  c - cyan foreground             C - cyan background
  w - white foreground            W - white background
& fdiv()

  FUNCTION: fdiv(<number1>,<number2>)

  Returns the floating point quotient from dividing <number1> by <number2>.
  <number> may be a floating point number, and a floating point result is
  returned.

  Examples:
    > say fdiv(15,3)
    You say, "5"
    > say fdiv(16,3)
    You say, "5.333333"
    > say fdiv(17,3)
    You say, "5.666667"
    > say fdiv(18,3)
    You say, "6"
    > say fdiv(-17,3)
    You say, "-5.666667"
    > say fdiv(10,3.5)
    You say, "2.857143"

& round()
  FUNCTION: round(<number>,<places>)

  Rounds <number> to <places> positions right of the decimal point. <places>
  may be negative in which case the rounding occurs in the ones, tens,
  hundreds, etc. place.

  Examples:
    > say round(5.123,1)
    You say, "5.1"
    > say round(9.8765,3)
    You say, "9.877"
    > say round(5.5,0)
    You say, "6"
    > say round(-5.5,0)
    You say, "-6"
    > say round(520,-3)
    You say, "1000"

& if()

  FUNCTION:     if(<expression>,<true string>[,<false string>])
            ifelse(<expression>,<true string>,<false string>)

  This function returns <true string> if BOOLEAN <expression> is TRUE,
  <false string> otherwise. Much more efficient than an equivalent switch().
  It can also return different messages based on whether <expression> is
  nothing or contains text.  if() does the same thing, but the third,
  <false string> argument is optional.

  Example:
    > think ifelse(v(test),Test exists!,Test doesn't exist.)
    Test doesn't exist.

& ifelse()
run: help if()
